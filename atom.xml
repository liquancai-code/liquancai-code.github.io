<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liquancai-code.github.io</id>
    <title>li_quancai</title>
    <updated>2020-07-02T15:28:06.316Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liquancai-code.github.io"/>
    <link rel="self" href="https://liquancai-code.github.io/atom.xml"/>
    <subtitle>不困于情，不憾于心</subtitle>
    <logo>https://liquancai-code.github.io/images/avatar.png</logo>
    <icon>https://liquancai-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, li_quancai</rights>
    <entry>
        <title type="html"><![CDATA[pygame开发游戏的主要流程]]></title>
        <id>https://liquancai-code.github.io/post/pygame-kai-fa-you-xi-de-zhu-yao-liu-cheng/</id>
        <link href="https://liquancai-code.github.io/post/pygame-kai-fa-you-xi-de-zhu-yao-liu-cheng/">
        </link>
        <updated>2020-07-02T15:27:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pygame开发游戏的主要流程">pygame开发游戏的主要流程</h1>
<p>pygame开发游戏的基础是创建游戏窗口，核心是处理事件、更新游戏状态和在屏幕上绘制图形。游戏状态可以理解为程序中所有变量值的列表。在有些游戏中，游戏状态包括存放人物健康个位置的变量、物体或图形位置的变化，这些值可以在屏幕上表示。</p>
<p>物体或图形位置的变化只有通过在屏幕上绘图才可以看出来。</p>
<p>可以简单的抽象出pygame开发游戏的主要流程如下：</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/liquancai/blog_images/raw/master/img/image-20200702225938129.png" alt="image-20200702225938129" loading="lazy"></figure>
<p>下面举一个具体例子来说明：</p>
<p>使用 pygame 开发一个显示 “Hello World!”标题的窗口</p>
<pre><code class="language-python">import pygame

def hello_world():
    pygame.init()
    pygame.display.set_mode((400, 600))
    pygame.display.set_caption(&quot;Hello World!&quot;)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
        pygame.display.update()


if __name__ == '__main__':
    hello_world()
</code></pre>
<p>运行后仅见到黑色的游戏窗口，标题是“Hello World!”，如下所示：</p>
<img src="https://gitee.com/liquancai/blog_images/raw/master/img/image-20200702231051363.png" alt="image-20200702231051363" style="zoom:50%;" />
<p>在导入pygame模块后，任何pygame游戏程序均需要执行 <code>pygame.init()</code> 语句进行模块的初始化，它必须在进入游戏的无限循环之前被调用。这个函数会自动初始化其他所有模块（例如 pygame.font  和 pygame.image），通过它载入驱动和硬件请求，这样游戏程序才可以使用计算机上的所有设备，比较费时间。如果只使用少量的模块，应该分别初始化这些模块以节省时间，例如 pygame.sound.init() 仅仅初始化声音模块。</p>
<p>该代码中有个无限循环，每个 pygame 程序都需要它，在无限循环中可以做以下操作。</p>
<ol>
<li>处理事件：例如鼠标 、键盘 、关闭窗口等事件。</li>
<li>更新游戏状态：例如坦克的位置变化 、数量变化等。</li>
<li>在屏幕上绘图：例如绘制新的敌方坦克等。</li>
</ol>
<p>不断重复上面3个步骤，从而完成游戏逻辑。</p>
<p>在本例代码中仅仅处理关闭窗口事件，也就是玩家关闭窗口时 <code>pyagme.quit()</code> 退出游戏。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pygame基础知识]]></title>
        <id>https://liquancai-code.github.io/post/pygame-ji-chu-zhi-shi/</id>
        <link href="https://liquancai-code.github.io/post/pygame-ji-chu-zhi-shi/">
        </link>
        <updated>2020-07-01T10:14:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="pygame-基础知识">Pygame 基础知识</h1>
<hr>
<h3 id="1-安装pygame库">1. 安装Pygame库</h3>
<p> </p>
<ul>
<li>
<p><code>pygame</code>是一个Python模块，专为电子游戏设计</p>
</li>
<li>
<p><a href="">官方网站</a> :  https://www.pygame.org/</p>
<table>
<thead>
<tr>
<th style="text-align:left">网站栏目</th>
<th style="text-align:left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GettingStarted</td>
<td style="text-align:left">在各平台安装模块的说明</td>
</tr>
<tr>
<td style="text-align:left">Docs</td>
<td style="text-align:left">pygame模块所有<strong>类</strong>和<strong>子类</strong>的参考手册</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong>安装pygame</strong></p>
<p>直接在 命令提示符 窗口输入：<code>pip install pygame</code></p>
</li>
<li>
<p><strong>验证安装</strong></p>
<p>同样在 命令提示符 窗口输入：<code>python -m pygame.example.aliens</code> 出现一个动画窗口即表示安装成功。</p>
</li>
</ul>
</li>
</ul>
<p> </p>
<h3 id="2-pygame的模块">2.  Pygame的模块</h3>
<p> </p>
<p>​  <code>Pygame</code>有大量的可以独立使用的模块。对于计算机的的常用设备，都有对应的模块进行控制。如下表所示：</p>
<p>​																				 Pygame软件包中的模块</p>
<table>
<thead>
<tr>
<th style="text-align:left">模块名</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pygame.cdrom</td>
<td style="text-align:center">访问光驱</td>
</tr>
<tr>
<td style="text-align:left">pygame.cursors</td>
<td style="text-align:center">加载光驱</td>
</tr>
<tr>
<td style="text-align:left">pygame.display</td>
<td style="text-align:center">访问显示设备</td>
</tr>
<tr>
<td style="text-align:left">pygame.draw</td>
<td style="text-align:center">绘制形状 、线和点</td>
</tr>
<tr>
<td style="text-align:left">pygame.event</td>
<td style="text-align:center">管理事件</td>
</tr>
<tr>
<td style="text-align:left">pygame.font</td>
<td style="text-align:center">使用字体</td>
</tr>
<tr>
<td style="text-align:left">pygame.image</td>
<td style="text-align:center">加载和存储图片</td>
</tr>
<tr>
<td style="text-align:left">pygame.joystick</td>
<td style="text-align:center">使用游戏手柄或类似的东西</td>
</tr>
<tr>
<td style="text-align:left">pygame.key</td>
<td style="text-align:center">读取键盘按键</td>
</tr>
<tr>
<td style="text-align:left">pygame.mixer</td>
<td style="text-align:center">声音</td>
</tr>
<tr>
<td style="text-align:left">pygame.mouse</td>
<td style="text-align:center">鼠标</td>
</tr>
<tr>
<td style="text-align:left">pygame.movie</td>
<td style="text-align:center">播放视频</td>
</tr>
<tr>
<td style="text-align:left">pygame.music</td>
<td style="text-align:center">播放音频</td>
</tr>
<tr>
<td style="text-align:left">pygame.overlay</td>
<td style="text-align:center">访问高级视频叠加</td>
</tr>
<tr>
<td style="text-align:left">pygame</td>
<td style="text-align:center">Python模块，专为电子游戏设计</td>
</tr>
<tr>
<td style="text-align:left">pygame.rect</td>
<td style="text-align:center">管理矩形区域</td>
</tr>
<tr>
<td style="text-align:left">pygame.sndarray</td>
<td style="text-align:center">操作声音数据</td>
</tr>
<tr>
<td style="text-align:left">pygame.sprite</td>
<td style="text-align:center">操作移动图像</td>
</tr>
<tr>
<td style="text-align:left">pygame.surface</td>
<td style="text-align:center">管理图像和屏幕</td>
</tr>
<tr>
<td style="text-align:left">pygame.surfarray</td>
<td style="text-align:center">管理点阵图像数据</td>
</tr>
<tr>
<td style="text-align:left">pygame.time</td>
<td style="text-align:center">管理时间和帧信息</td>
</tr>
<tr>
<td style="text-align:left">pygame.transform</td>
<td style="text-align:center">缩放和移动图像</td>
</tr>
</tbody>
</table>
<p>  建立 <code>Pyagme</code> 项目和建立其他 <code>Python</code> 项目一样，在IDLE或文本编辑器中新建一个空文档，需要告诉 <code>Python</code>  该程序用到了 <code>Pygame</code> 模块。</p>
<p>  为了实现此目的，需要用 <code>import</code> 指令告诉 <code>Python</code> 载入外部模块。如下：</p>
<pre><code class="language-python">import pygame, sys, time, random
from pygame.locals import * 
</code></pre>
<p>  第1行引入 <code>pygame</code> 的主要模块 、<code>sys</code> 模块 、<code>time</code> 模块 、<code>random</code> 模块</p>
<p>  第2行告诉 <code>python</code> 载入 <code>pygame.locals</code> 的所有指令使它们成为原生指令，这样在使用这些指令时就不需要使用全名调用。</p>
<p>  由于硬件和游戏的兼容性或者请求的驱动没有安装的问题，有些模块可能在某些平台上不存在，可以使用 <code>None</code> 调试一下。例如测试字体是否载入：</p>
<pre><code class="language-python">if pygame.font is None:
    print(&quot;The font module is not available!&quot;)
    pygame.quit()												# 如果没有则退出pygame的应用环境
</code></pre>
<p> </p>
<h3 id="3-常用模块简要说明">3.  常用模块简要说明</h3>
<p> <br>
<strong>1. pygame.surface</strong></p>
<p>  该模块中有一个 <code>surface()</code> 函数，<code>surface()</code> 的一般格式如下：</p>
<pre><code class="language-python">pygame.surface((width, height), flags=0, depth=0, masks=None)
</code></pre>
<p>它返回一个新的 <code>surface</code> 对象，这里的 <code>surface</code> 对象是一个有确定尺寸的空图像，可以用它进行图像的绘制与移动。</p>
<p> <br>
<strong>2. pygame.locals</strong></p>
<p>  在 <code>pygame.locals</code> 模块中定义了 <code>pygame</code> 环境中用到的各种常量，而且包括事件类型 、按键和视频模式等的名字，在导入所有内容（ <code>from pygame.locals import *</code> ） 时用起来很安全。</p>
<p>  如果用户知道需要的内容，也可以导入具体的内容（例如  <code>form pygame.locals import FULLSCREEN</code> ）。</p>
<p> <br>
<strong>3.  pygame.display</strong></p>
<p>  <code>pygame.display</code> 模块包括处理 <code>pygame</code> 显示方式的函数，其中包括普通窗口和全屏模式。</p>
<p>  游戏程序通常需要下面的函数：</p>
<ol>
<li>
<p><code>flip() / update()</code></p>
<ul>
<li><code>flip()</code>: 更新显示。一般来说，在修改当前屏幕的时候要经过两步，首先要对 <code>get_surface()</code> 函数返回的 <code>surface</code> 对象进行修改，然后调用 <code>pygame.display.flip()</code> 更新显示以反映所做的修改。</li>
<li><code>update()</code> : 在只想更新屏幕的一部分的时候使用 <code>update()</code> 函数，而不是 <code>flip()</code> 函数</li>
</ul>
</li>
<li>
<p><code>set_mode</code></p>
</li>
</ol>
<p>  该函数建立游戏窗口，返回 <code>surface</code> 对象。它有3个参数，第1个参数是元组，用于指定窗口的尺寸；第2个参数是标志位，具体含义如下表所示，例如 <code>FULLSCREEN</code> 表示全屏，默认值为不对窗口进行设置，可根据需要选用；第3个参数为色深，用于指定窗口的色彩位数。</p>
<p>​																		<code>set_mode</code> 的窗口标志位的参考取值</p>
<table>
<thead>
<tr>
<th>窗口标志位</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>FULLSCREEN</td>
<td>创建一个全屏窗口</td>
</tr>
<tr>
<td>DOUBLEBUF</td>
<td>创建一个 “双缓冲” 窗口，建议在 HWSURFACE 或者 OPENGL 时使用</td>
</tr>
<tr>
<td>HWSURFACE</td>
<td>创建一个硬件加速窗口，必须和 FULLSCREEN 同时使用</td>
</tr>
<tr>
<td>OPENGL</td>
<td>创建一个 OPENGL 渲染的窗口</td>
</tr>
<tr>
<td>RESIZABLE</td>
<td>创建一个可以改变大小的窗口</td>
</tr>
<tr>
<td>NOFRAME</td>
<td>创建一个没有边框的窗口</td>
</tr>
</tbody>
</table>
<ol start="3">
<li><code>set_caption()</code></li>
</ol>
<p>  该函数设定游戏程序的标题。当游戏以窗口模式（对应于全屏）运行时尤其有用，因为该标题会作为窗口的标题。</p>
<ol start="4">
<li>
<p><code>get_surface()</code></p>
<p>  该函数返回一个可用来画图的 <code>surface</code> 对象。</p>
</li>
</ol>
<p> <br>
<strong>4.  pygame.font</strong></p>
<p>  <code>pygame.font</code> 模块用于表现不同字体，可以用于文本。</p>
<p> <br>
<strong>5.  pygame.sprite</strong></p>
<p>  <code>pygame.sprite</code> 模块有两个非常重要的类—— <code>sprite</code> 精灵类和 <code>Group</code> 精灵组类。</p>
<p>  <code>sprite</code> 精灵类是所有可视游戏的基类。为了实现自己的游戏对象，需要子类化 <code>sprite</code> ，覆盖它的构造函数，以设定 <code>image</code> 和 <code>rect</code> 属性（决定 <code>sprite</code> 的外观和放置的位置），再覆盖 <code>update()</code> 方法。在<code>sprite</code> 需要更新的时候可以调用 <code>update()</code> 方法。</p>
<p>  <code>Group</code> 精灵组类的实例作为 <code>sprite</code> 精灵对象的容器。在一些简单的游戏中，只要创建名为：<code>sprites</code>，<code>allsprite</code> 或是其他类型的组，然后将所有 <code>sprite</code> 精灵对象添加到上面即可。当 <code>Group</code> 精灵组对象的 <code>update()</code> 方法被调用时会自动调用所有 <code>sprite</code> 精灵对象的 <code>update()</code> 方法。<code>Group</code> 精灵组对象的 <code>clear()</code> 方法用于清理它包含的所有 <code>sprite</code> 对象。<code>Group</code>  精灵组对象的 <code>draw()</code> 方法用于绘制所有的 <code>sprite</code> 对象。</p>
<p> <br>
<strong>6.  pygame.mouse</strong></p>
<p>  该模块用来管理鼠标<br>
  <code>pygame.mouse.set_visible(False/True)</code> ：隐藏显示鼠标光标。<br>
  <code>pygame.mouse.get_pos()</code> ：获取鼠标位置。</p>
<p> <br>
<strong>7.  pygame.event</strong></p>
<p>  <code>pygame.event</code> 模块会追踪鼠标单击 、鼠标移动 、按键按下和释放等事件。其中<br>
  <code>pygame.event.get()</code> 可以获取最近事件列表。</p>
<p> <br>
<strong>8.  pygame.image</strong></p>
<p>  这个模块用于处理保存在 GIF 、PNG 或者 JPEG 内的图形，用户可以用 <code>load()</code> 函数来读取图像文件。</p>
]]></content>
    </entry>
</feed>